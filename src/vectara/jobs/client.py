# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.datetime_utils import serialize_datetime
from ..core.jsonable_encoder import jsonable_encoder
from ..core.pydantic_utilities import pydantic_v1
from ..core.request_options import RequestOptions
from ..errors.forbidden_error import ForbiddenError
from ..errors.not_found_error import NotFoundError
from ..types.corpus_key import CorpusKey
from ..types.error import Error
from ..types.job import Job
from ..types.job_state import JobState
from ..types.list_jobs_response import ListJobsResponse
from ..types.not_found_error_body import NotFoundErrorBody


class JobsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list_jobs(
        self,
        *,
        corpus_key: typing.Optional[typing.Union[CorpusKey, typing.Sequence[CorpusKey]]] = None,
        after: typing.Optional[dt.datetime] = None,
        state: typing.Optional[typing.Union[JobState, typing.Sequence[JobState]]] = None,
        limit: typing.Optional[int] = None,
        page_key: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListJobsResponse:
        """
        List jobs for the account. Jobs are background processes like replacing the filterable metadata attributes.

        Parameters
        ----------
        corpus_key : typing.Optional[typing.Union[CorpusKey, typing.Sequence[CorpusKey]]]
            The unique key identifying the corpus with the job.

        after : typing.Optional[dt.datetime]
            Get jobs after a date time.

        state : typing.Optional[typing.Union[JobState, typing.Sequence[JobState]]]
            Indicates the states the jobs can be in.

        limit : typing.Optional[int]
            The maximum number of documents to return at one time.

        page_key : typing.Optional[str]
            Used to the retrieve the next page of documents after the limit has been reached.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListJobsResponse
            List of jobs.

        Examples
        --------
        from vectara.client import Vectara

        client = Vectara(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
        )
        client.jobs.list_jobs()
        """
        _response = self._client_wrapper.httpx_client.request(
            "v2/jobs",
            method="GET",
            params={
                "corpus_key": corpus_key,
                "after": serialize_datetime(after) if after is not None else None,
                "state": state,
                "limit": limit,
                "page_key": page_key,
            },
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(ListJobsResponse, _response.json())  # type: ignore
        if _response.status_code == 403:
            raise ForbiddenError(pydantic_v1.parse_obj_as(Error, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_job(self, job_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> Job:
        """
        Get a job by a specific ID. Jobs are backgrouond processes like replacing the filterable metadata attributes.

        Parameters
        ----------
        job_id : str
            The ID of job to get.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Job
            A job.

        Examples
        --------
        from vectara.client import Vectara

        client = Vectara(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
        )
        client.jobs.get_job(
            job_id="job_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v2/jobs/{jsonable_encoder(job_id)}", method="GET", request_options=request_options
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(Job, _response.json())  # type: ignore
        if _response.status_code == 403:
            raise ForbiddenError(pydantic_v1.parse_obj_as(Error, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic_v1.parse_obj_as(NotFoundErrorBody, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncJobsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list_jobs(
        self,
        *,
        corpus_key: typing.Optional[typing.Union[CorpusKey, typing.Sequence[CorpusKey]]] = None,
        after: typing.Optional[dt.datetime] = None,
        state: typing.Optional[typing.Union[JobState, typing.Sequence[JobState]]] = None,
        limit: typing.Optional[int] = None,
        page_key: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListJobsResponse:
        """
        List jobs for the account. Jobs are background processes like replacing the filterable metadata attributes.

        Parameters
        ----------
        corpus_key : typing.Optional[typing.Union[CorpusKey, typing.Sequence[CorpusKey]]]
            The unique key identifying the corpus with the job.

        after : typing.Optional[dt.datetime]
            Get jobs after a date time.

        state : typing.Optional[typing.Union[JobState, typing.Sequence[JobState]]]
            Indicates the states the jobs can be in.

        limit : typing.Optional[int]
            The maximum number of documents to return at one time.

        page_key : typing.Optional[str]
            Used to the retrieve the next page of documents after the limit has been reached.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListJobsResponse
            List of jobs.

        Examples
        --------
        from vectara.client import AsyncVectara

        client = AsyncVectara(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
        )
        await client.jobs.list_jobs()
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v2/jobs",
            method="GET",
            params={
                "corpus_key": corpus_key,
                "after": serialize_datetime(after) if after is not None else None,
                "state": state,
                "limit": limit,
                "page_key": page_key,
            },
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(ListJobsResponse, _response.json())  # type: ignore
        if _response.status_code == 403:
            raise ForbiddenError(pydantic_v1.parse_obj_as(Error, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_job(self, job_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> Job:
        """
        Get a job by a specific ID. Jobs are backgrouond processes like replacing the filterable metadata attributes.

        Parameters
        ----------
        job_id : str
            The ID of job to get.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Job
            A job.

        Examples
        --------
        from vectara.client import AsyncVectara

        client = AsyncVectara(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
        )
        await client.jobs.get_job(
            job_id="job_id",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v2/jobs/{jsonable_encoder(job_id)}", method="GET", request_options=request_options
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(Job, _response.json())  # type: ignore
        if _response.status_code == 403:
            raise ForbiddenError(pydantic_v1.parse_obj_as(Error, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic_v1.parse_obj_as(NotFoundErrorBody, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
