# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
from .language import Language
from .model_parameters import ModelParameters
from .citation_parameters import CitationParameters
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class GenerationParameters(UniversalBaseModel):
    """
    The parameters to control generation.
    """

    prompt_name: typing.Optional[str] = pydantic.Field(default=None)
    """
    The prompt to use to feed the query results and other context to the model. By specifying the
    prompt name you also specify the model and other `model_parameter` defaults.
    """

    max_used_search_results: typing.Optional[int] = pydantic.Field(default=None)
    """
    The maximum number of search results to be available to the prompt.
    """

    prompt_text: typing.Optional[str] = pydantic.Field(default=None)
    """
    Vectara manages both system and user roles and prompts for the generative
    LLM out of the box by default. However, Scale customers can override the
    prompt_text via this variable. The prompt_text is in the form of an
    Apache Velocity template. For more details on how to configure the
    prompt_text, see the long-form documentation at
    https://docs.vectara.com/docs/prompts/vectara-prompt-engine.
    See https://vectara.com/pricing/ for more details on becoming a Scale customer.
    """

    max_response_characters: typing.Optional[int] = pydantic.Field(default=None)
    """
    Controls the length of the generated output.
    This is a rough estimate and not a hard limit: the end output can be longer or shorter
    than this value. This is currently a Scale-only feature.
    See https://vectara.com/pricing/ for more details on becoming a Scale customer.
    """

    response_language: typing.Optional[Language] = None
    model_parameters: typing.Optional[ModelParameters] = pydantic.Field(default=None)
    """
    The parameters for the model. These are currently a Scale-only feature.
    See https://vectara.com/pricing/ for more details on becoming a Scale customer.
    WARNING: This is an experimental feature, and breakable at any point with virtually no
    notice. It is meant for experimentation to converge on optimal parameters that can then
    be set in the prompt definitions.
    """

    citations: typing.Optional[CitationParameters] = None
    enable_factual_consistency_score: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Enable returning the factual consistency score with query results.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
