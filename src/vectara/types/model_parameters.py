# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic.v1 as pydantic

from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import deep_union_pydantic_dicts


class ModelParameters(pydantic.BaseModel):
    """
    The parameters for the model. These are currently a Scale-only feature.
    See https://vectara.com/pricing/ for more details on becoming a Scale customer.
    WARNING: This is an experimental feature, and breakable at any point with virtually no
    notice. It is meant for experimentation to converge on optimal parameters that can then
    be set in the prompt definitions.
    """

    max_tokens: typing.Optional[int] = pydantic.Field(default=None)
    """
    The maximum number of tokens to be returned by the model.
    """

    temperature: typing.Optional[float] = pydantic.Field(default=None)
    """
    The sampling temperature to use. Higher values make the output more random, while lower
    values make it more focused and deterministic.
    """

    frequency_penalty: typing.Optional[float] = pydantic.Field(default=None)
    """
    Higher values penalize new tokens based on their existing frequency in the text so far,
    decreasing the model's likelihood to repeat the same line verbatim.
    """

    presence_penalty: typing.Optional[float] = pydantic.Field(default=None)
    """
    Higher values penalize new tokens based on whether they appear in the text so far,
    increasing the model's likelihood to talk about new topics.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
