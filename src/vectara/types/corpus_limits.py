# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic.v1 as pydantic

from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import deep_union_pydantic_dicts


class CorpusLimits(pydantic.BaseModel):
    used_bytes: typing.Optional[int] = pydantic.Field(default=None)
    """
    The number of bytes contained in the corpus.
    """

    max_bytes: typing.Optional[int] = pydantic.Field(default=None)
    """
    The maximum number of bytes the corpus can be.
    """

    max_metadata_bytes: typing.Optional[int] = pydantic.Field(default=None)
    """
    The maximum size that metadata can be on documents.
    """

    index_rate: typing.Optional[int] = pydantic.Field(default=None)
    """
    The maximum per-second addition of new documents to corpus.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
