# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic.v1 as pydantic

from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import deep_union_pydantic_dicts


class Chat(pydantic.BaseModel):
    id: typing.Optional[str] = pydantic.Field(default=None)
    """
    ID of the chat.
    """

    first_query: typing.Optional[str] = pydantic.Field(default=None)
    """
    The first query of the chat.
    """

    first_answer: typing.Optional[str] = pydantic.Field(default=None)
    """
    The first answer of the chat.
    """

    enabled: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Indicates whether this chat is enabled and can have further turns.
    """

    created_at: typing.Optional[dt.datetime] = pydantic.Field(default=None)
    """
    Specifies when this chat was created.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
