# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic.v1 as pydantic

from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import deep_union_pydantic_dicts
from .api_policy import ApiPolicy
from .api_role import ApiRole


class AppClient(pydantic.BaseModel):
    id: typing.Optional[str] = pydantic.Field(default=None)
    """
    The Vectara App Client ID. This ID is not used during an OAuth
    flow but the ID used within the Vectara API.
    """

    name: typing.Optional[str] = pydantic.Field(default=None)
    """
    The human-readable name of the App Client.
    """

    description: typing.Optional[str] = pydantic.Field(default=None)
    """
    Descritpion of the App Client.
    """

    client_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    The client ID used with the OAuth flow.
    """

    client_secret: typing.Optional[str] = pydantic.Field(default=None)
    """
    The key used in API requests. Should be kept secure.
    """

    api_roles: typing.Optional[typing.List[ApiRole]] = pydantic.Field(default=None)
    """
    The API roles attached to the App Client.
    """

    api_policy: typing.Optional[ApiPolicy] = None

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
