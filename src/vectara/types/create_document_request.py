# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ..core.pydantic_utilities import UniversalBaseModel
import typing
from .core_document_part import CoreDocumentPart
from ..core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic
from .structured_document_section import StructuredDocumentSection
from .custom_dimensions import CustomDimensions
from ..core.pydantic_utilities import update_forward_refs


class CreateDocumentRequest_Core(UniversalBaseModel):
    """
    Creating a document using this endpoint can take multiple forms depending on how much
    control of the resulting document parts you desire. You can create a document
    with natural structure, and Vectara will use it's proprietary strategy to create document parts.

    Otherwise, you can create a document with all the document parts explicitly specified.

    A document part is the a search result item in search and retrieval augmented generation endpoints.
    """

    type: typing.Literal["core"] = "core"
    id: str
    metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = None
    document_parts: typing.List[CoreDocumentPart]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class CreateDocumentRequest_Structured(UniversalBaseModel):
    """
    Creating a document using this endpoint can take multiple forms depending on how much
    control of the resulting document parts you desire. You can create a document
    with natural structure, and Vectara will use it's proprietary strategy to create document parts.

    Otherwise, you can create a document with all the document parts explicitly specified.

    A document part is the a search result item in search and retrieval augmented generation endpoints.
    """

    type: typing.Literal["structured"] = "structured"
    id: str
    title: typing.Optional[str] = None
    description: typing.Optional[str] = None
    metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = None
    custom_dimensions: typing.Optional[CustomDimensions] = None
    sections: typing.List[StructuredDocumentSection]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


CreateDocumentRequest = typing.Union[CreateDocumentRequest_Core, CreateDocumentRequest_Structured]
update_forward_refs(StructuredDocumentSection, CreateDocumentRequest_Structured=CreateDocumentRequest_Structured)
