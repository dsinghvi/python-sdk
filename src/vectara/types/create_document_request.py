# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import datetime as dt
import typing

import pydantic.v1 as pydantic

from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import deep_union_pydantic_dicts
from .core_document_part import CoreDocumentPart
from .custom_dimensions import CustomDimensions
from .structured_document_section import StructuredDocumentSection


class CreateDocumentRequest_Core(pydantic.BaseModel):
    """
    Creating a document using this endpoint can take multiple forms depending on how much
    control of the resulting document parts you desire. You can create a document
    with natural structure, and Vectara will use it's proprietary strategy to create document parts.

    Otherwise, you can create a document with all the document parts explicitly specified.

    A document part is the a search result item in search and retrieval augmeneted generation endpoints.
    """

    id: str
    metadata: typing.Optional[typing.Dict[str, typing.Any]] = None
    document_parts: typing.List[CoreDocumentPart]
    type: typing.Literal["core"] = "core"

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}


class CreateDocumentRequest_Structured(pydantic.BaseModel):
    """
    Creating a document using this endpoint can take multiple forms depending on how much
    control of the resulting document parts you desire. You can create a document
    with natural structure, and Vectara will use it's proprietary strategy to create document parts.

    Otherwise, you can create a document with all the document parts explicitly specified.

    A document part is the a search result item in search and retrieval augmeneted generation endpoints.
    """

    id: str
    title: typing.Optional[str] = None
    description: typing.Optional[str] = None
    metadata: typing.Optional[typing.Dict[str, typing.Any]] = None
    custom_dimensions: typing.Optional[CustomDimensions] = None
    sections: typing.List[StructuredDocumentSection]
    type: typing.Literal["structured"] = "structured"

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}


CreateDocumentRequest = typing.Union[CreateDocumentRequest_Core, CreateDocumentRequest_Structured]
