# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic.v1 as pydantic

from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import deep_union_pydantic_dicts


class CorpusCustomDimension(pydantic.BaseModel):
    """
    Custom dimensions attached to all document parts in a corpus. Allows arbitrary
    modification of the score for many purposes.
    """

    name: str = pydantic.Field()
    """
    The name of the custom dimension.
    """

    indexing_default: typing.Optional[float] = pydantic.Field(default=None)
    """
    Default value of a custom dimension on a document part if the custom
    dimension value is not specified when the document part is indexed.
    
    A value of 0 means that custom dimension is not considered.
    """

    querying_default: typing.Optional[float] = pydantic.Field(default=None)
    """
    Default value of a custom dimension for a query if the value
    of the custom dimension is not specified when querying the corpus.
    
    A value of 0 means that custom dimension is not considered.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
