# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ..core.pydantic_utilities import UniversalBaseModel
import typing
from ..core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic
from ..core.pydantic_utilities import update_forward_refs


class SearchReranker_CustomerReranker(UniversalBaseModel):
    """
    Rerank results of the search. Rerankers are very powerful tools to better order search results.
    By default the search will use the most powerful reranker available to the customer's plan.
    To disable reranking set the reranker `type` to `"none"`.
    """

    type: typing.Literal["customer_reranker"] = "customer_reranker"
    reranker_id: typing.Optional[str] = None
    reranker_name: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class SearchReranker_Userfn(UniversalBaseModel):
    """
    Rerank results of the search. Rerankers are very powerful tools to better order search results.
    By default the search will use the most powerful reranker available to the customer's plan.
    To disable reranking set the reranker `type` to `"none"`.
    """

    type: typing.Literal["userfn"] = "userfn"
    user_function: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class SearchReranker_Mmr(UniversalBaseModel):
    """
    Rerank results of the search. Rerankers are very powerful tools to better order search results.
    By default the search will use the most powerful reranker available to the customer's plan.
    To disable reranking set the reranker `type` to `"none"`.
    """

    type: typing.Literal["mmr"] = "mmr"
    diversity_bias: typing.Optional[float] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class SearchReranker_Chain(UniversalBaseModel):
    """
    Rerank results of the search. Rerankers are very powerful tools to better order search results.
    By default the search will use the most powerful reranker available to the customer's plan.
    To disable reranking set the reranker `type` to `"none"`.
    """

    type: typing.Literal["chain"] = "chain"
    rerankers: typing.List["SearchReranker"]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


from .chain_reranker import ChainReranker  # noqa: E402


class SearchReranker_None(UniversalBaseModel):
    """
    Rerank results of the search. Rerankers are very powerful tools to better order search results.
    By default the search will use the most powerful reranker available to the customer's plan.
    To disable reranking set the reranker `type` to `"none"`.
    """

    type: typing.Literal["none"] = "none"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


SearchReranker = typing.Union[
    SearchReranker_CustomerReranker,
    SearchReranker_Userfn,
    SearchReranker_Mmr,
    SearchReranker_Chain,
    SearchReranker_None,
]
update_forward_refs(ChainReranker, SearchReranker_Chain=SearchReranker_Chain)
update_forward_refs(SearchReranker_Chain)
