# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic.v1 as pydantic

from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import deep_union_pydantic_dicts
from .api_operation_policy import ApiOperationPolicy


class ApiPolicy(pydantic.BaseModel):
    """
    What actions a principal can take on the Vectara platform.
    """

    name: str = pydantic.Field()
    """
    The name of the API role.
    """

    allowed_operations: typing.Dict[str, ApiOperationPolicy] = pydantic.Field()
    """
    Operations that are allowed by the API role. Each operation may only allow
    certain resources that are described by a resource path to resource value
    map. If the value is null, then the operation is allowed on any resource.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
