# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from .api_role import ApiRole


class CreateClientCredentialsRequest(pydantic_v1.BaseModel):
    """
    Create an App Client which allows you to call Vectara APIs using OAuth 2.0 client credentials.
    """

    name: str = pydantic_v1.Field()
    """
    Name of the client credentials.
    """

    description: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    Description of the client credentials.
    """

    type: typing.Literal["client_credentials"] = "client_credentials"
    api_roles: typing.Optional[typing.List[ApiRole]] = pydantic_v1.Field(default=None)
    """
    API roles that the client credentials will have.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
