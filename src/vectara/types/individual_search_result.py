# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic.v1 as pydantic

from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import deep_union_pydantic_dicts


class IndividualSearchResult(pydantic.BaseModel):
    """
    An individual ranked search result from a query.
    """

    text: typing.Optional[str] = pydantic.Field(default=None)
    """
    The document part altered by the context configuration that matches the query.
    """

    score: typing.Optional[float] = pydantic.Field(default=None)
    """
    The score of the individual result.
    """

    part_metadata: typing.Optional[typing.Dict[str, typing.Any]] = pydantic.Field(default=None)
    """
    The metadata for the document part.
    """

    document_metadata: typing.Optional[typing.Dict[str, typing.Any]] = pydantic.Field(default=None)
    """
    The metadata for the document that contains the document part.
    """

    document_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    The ID of the document that contains the document part.
    """

    request_corpora_index: typing.Optional[int] = pydantic.Field(default=None)
    """
    A query request can search over multiple corpora at a time. This proprety
    is set to the index in the list of corpora in the original search request that this
    search result originated from.
    
    If the query request is only over one corpus, this property is 0.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
