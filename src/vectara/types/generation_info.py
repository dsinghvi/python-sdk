# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1


class GenerationInfo(pydantic_v1.BaseModel):
    """
    Event containing information on how the generation was accomplished.
    """

    rendered_prompt: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The rendered prompt sent to the LLM. Useful when creating customer `prompt_text` templates. Only available
    to Scale customers.
    """

    rephrased_query: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    If you are on the Scale plan, you can view the actual query made to backend that was rephrased
    by the LLM from the input query.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
