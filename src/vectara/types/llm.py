# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic.v1 as pydantic

from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import deep_union_pydantic_dicts


class Llm(pydantic.BaseModel):
    """
    A LLM can be used to enhance query results with a response, and be used as
    the responder during a chat.
    """

    id: typing.Optional[str] = pydantic.Field(default=None)
    """
    The ID of the LLM. This is used as the model ID in a query.
    """

    name: typing.Optional[str] = pydantic.Field(default=None)
    """
    Name of the LLM.
    """

    description: typing.Optional[str] = pydantic.Field(default=None)
    """
    The description of the LLM.
    """

    enabled: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Indicates whether the LLM is enabled.
    """

    default: typing.Optional[bool] = pydantic.Field(default=None)
    """
    If this is the default LLM, it is used in queries when the generator
    is not specified.
    """

    prompts: typing.Optional[typing.Any] = None

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
