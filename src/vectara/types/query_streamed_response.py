# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ..core.pydantic_utilities import UniversalBaseModel
import typing
from .individual_search_result import IndividualSearchResult
from ..core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic


class QueryStreamedResponse_SearchResults(UniversalBaseModel):
    """
    An individual event sent with SSE when the query request is streamed.
    """

    type: typing.Literal["search_results"] = "search_results"
    search_results: typing.Optional[typing.List[IndividualSearchResult]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class QueryStreamedResponse_GenerationChunk(UniversalBaseModel):
    """
    An individual event sent with SSE when the query request is streamed.
    """

    type: typing.Literal["generation_chunk"] = "generation_chunk"
    generation_chunk: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class QueryStreamedResponse_GenerationEnd(UniversalBaseModel):
    """
    An individual event sent with SSE when the query request is streamed.
    """

    type: typing.Literal["generation_end"] = "generation_end"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class QueryStreamedResponse_FactualConsistencyScore(UniversalBaseModel):
    """
    An individual event sent with SSE when the query request is streamed.
    """

    type: typing.Literal["factual_consistency_score"] = "factual_consistency_score"
    factual_consistency_score: typing.Optional[float] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class QueryStreamedResponse_GenerationInfo(UniversalBaseModel):
    """
    An individual event sent with SSE when the query request is streamed.
    """

    type: typing.Literal["generation_info"] = "generation_info"
    rendered_prompt: typing.Optional[str] = None
    rephrased_query: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class QueryStreamedResponse_Error(UniversalBaseModel):
    """
    An individual event sent with SSE when the query request is streamed.
    """

    type: typing.Literal["error"] = "error"
    messages: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class QueryStreamedResponse_End(UniversalBaseModel):
    """
    An individual event sent with SSE when the query request is streamed.
    """

    type: typing.Literal["end"] = "end"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


QueryStreamedResponse = typing.Union[
    QueryStreamedResponse_SearchResults,
    QueryStreamedResponse_GenerationChunk,
    QueryStreamedResponse_GenerationEnd,
    QueryStreamedResponse_FactualConsistencyScore,
    QueryStreamedResponse_GenerationInfo,
    QueryStreamedResponse_Error,
    QueryStreamedResponse_End,
]
