# This file was auto-generated by Fern from our API Definition.

import typing
from ..environment import VectaraEnvironment
import httpx
from .http_client import HttpClient
from .http_client import AsyncHttpClient


class BaseClientWrapper:
    def __init__(
        self,
        *,
        request_timeout: typing.Optional[int] = None,
        request_timeout_millis: typing.Optional[int] = None,
        token: typing.Union[str, typing.Callable[[], str]],
        environment: VectaraEnvironment,
        timeout: typing.Optional[float] = None,
    ):
        self._request_timeout = request_timeout
        self._request_timeout_millis = request_timeout_millis
        self._token = token
        self._environment = environment
        self._timeout = timeout

    def get_headers(self) -> typing.Dict[str, str]:
        headers: typing.Dict[str, str] = {
            "X-Fern-Language": "Python",
            "X-Fern-SDK-Name": "vectara",
            "X-Fern-SDK-Version": "0.2.23",
        }
        if self._request_timeout is not None:
            headers["Request-Timeout"] = self._request_timeout
        if self._request_timeout_millis is not None:
            headers["Request-Timeout-Millis"] = self._request_timeout_millis
        headers["Authorization"] = f"Bearer {self._get_token()}"
        return headers

    def _get_token(self) -> str:
        if isinstance(self._token, str):
            return self._token
        else:
            return self._token()

    def get_environment(self) -> VectaraEnvironment:
        return self._environment

    def get_timeout(self) -> typing.Optional[float]:
        return self._timeout


class SyncClientWrapper(BaseClientWrapper):
    def __init__(
        self,
        *,
        request_timeout: typing.Optional[int] = None,
        request_timeout_millis: typing.Optional[int] = None,
        token: typing.Union[str, typing.Callable[[], str]],
        environment: VectaraEnvironment,
        timeout: typing.Optional[float] = None,
        httpx_client: httpx.Client,
    ):
        super().__init__(
            request_timeout=request_timeout,
            request_timeout_millis=request_timeout_millis,
            token=token,
            environment=environment,
            timeout=timeout,
        )
        self.httpx_client = HttpClient(
            httpx_client=httpx_client, base_headers=self.get_headers(), base_timeout=self.get_timeout()
        )


class AsyncClientWrapper(BaseClientWrapper):
    def __init__(
        self,
        *,
        request_timeout: typing.Optional[int] = None,
        request_timeout_millis: typing.Optional[int] = None,
        token: typing.Union[str, typing.Callable[[], str]],
        environment: VectaraEnvironment,
        timeout: typing.Optional[float] = None,
        httpx_client: httpx.AsyncClient,
    ):
        super().__init__(
            request_timeout=request_timeout,
            request_timeout_millis=request_timeout_millis,
            token=token,
            environment=environment,
            timeout=timeout,
        )
        self.httpx_client = AsyncHttpClient(
            httpx_client=httpx_client, base_headers=self.get_headers(), base_timeout=self.get_timeout()
        )
