# This file was auto-generated by Fern from our API Definition.

import json
import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.jsonable_encoder import jsonable_encoder
from ..core.pydantic_utilities import pydantic_v1
from ..core.request_options import RequestOptions
from ..errors.bad_request_error import BadRequestError
from ..errors.forbidden_error import ForbiddenError
from ..errors.not_found_error import NotFoundError
from ..types.bad_request_error_body import BadRequestErrorBody
from ..types.corpus_key import CorpusKey
from ..types.error import Error
from ..types.generation_parameters import GenerationParameters
from ..types.not_found_error_body import NotFoundErrorBody
from ..types.query_full_response import QueryFullResponse
from ..types.search_corpora_parameters import SearchCorporaParameters
from .types.search_corpus_parameters import SearchCorpusParameters

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class QueriesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get_corpora(
        self,
        *,
        query: str,
        search: SearchCorporaParameters,
        generation: typing.Optional[GenerationParameters] = OMIT,
        stream_response: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Iterator[QueryFullResponse]:
        """
        Perform a multi-purpose query that can retrieve relevant information from one or more corpora and generate a response using RAG.

        Parameters
        ----------
        query : str
            The query to receive an answer on.

        search : SearchCorporaParameters

        generation : typing.Optional[GenerationParameters]

        stream_response : typing.Optional[bool]
            Indicates whether the response should be streamed or not.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Yields
        ------
        typing.Iterator[QueryFullResponse]
            A response to a query.

        Examples
        --------
        from vectara import (
            CitationParameters,
            ContextConfiguration,
            GenerationParameters,
            KeyedSearchCorpus,
            ModelParameters,
            SearchCorporaParameters,
            SearchReranker_CustomerReranker,
        )
        from vectara.client import Vectara

        client = Vectara(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
        )
        response = client.queries.get_corpora(
            query="string",
            search=SearchCorporaParameters(
                corpora=[KeyedSearchCorpus()],
                offset=1,
                limit=1,
                context_configuration=ContextConfiguration(),
                reranker=SearchReranker_CustomerReranker(),
            ),
            generation=GenerationParameters(
                prompt_name="string",
                max_used_search_results=1,
                prompt_text="string",
                max_response_characters=1,
                response_language="auto",
                model_parameters=ModelParameters(
                    max_tokens=1,
                    temperature=1.1,
                    frequency_penalty=1.1,
                    presence_penalty=1.1,
                ),
                citations=CitationParameters(),
                enable_factual_consistency_score=True,
            ),
            stream_response=True,
        )
        for chunk in response:
            yield chunk
        """
        with self._client_wrapper.httpx_client.stream(
            "v2/query",
            method="POST",
            json={"query": query, "search": search, "generation": generation, "stream_response": stream_response},
            request_options=request_options,
            omit=OMIT,
        ) as _response:
            if 200 <= _response.status_code < 300:
                for _text in _response.iter_lines():
                    if len(_text) == 0:
                        continue
                    yield pydantic_v1.parse_obj_as(QueryFullResponse, json.loads(_text))  # type: ignore
                return
            _response.read()
            if _response.status_code == 400:
                raise BadRequestError(pydantic_v1.parse_obj_as(BadRequestErrorBody, _response.json()))  # type: ignore
            if _response.status_code == 403:
                raise ForbiddenError(pydantic_v1.parse_obj_as(Error, _response.json()))  # type: ignore
            if _response.status_code == 404:
                raise NotFoundError(pydantic_v1.parse_obj_as(NotFoundErrorBody, _response.json()))  # type: ignore
            try:
                _response_json = _response.json()
            except JSONDecodeError:
                raise ApiError(status_code=_response.status_code, body=_response.text)
            raise ApiError(status_code=_response.status_code, body=_response_json)

    def search_corpus(
        self,
        corpus_key: CorpusKey,
        *,
        query: str,
        limit: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> QueryFullResponse:
        """
        Search a single corpus with a simple query request.

        Parameters
        ----------
        corpus_key : CorpusKey
            The unique key identifying the corpus to query.

        query : str
            The search query string for the corpus.

        limit : typing.Optional[int]
            Maximum number of results to return.

        offset : typing.Optional[int]
            Position from which to start in the result set.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        QueryFullResponse
            A response to a query.

        Examples
        --------
        from vectara.client import Vectara

        client = Vectara(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
        )
        client.queries.search_corpus(
            corpus_key="my-corpus",
            query="query",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v2/corpora/{jsonable_encoder(corpus_key)}/query",
            method="GET",
            params={"query": query, "limit": limit, "offset": offset},
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(QueryFullResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic_v1.parse_obj_as(BadRequestErrorBody, _response.json()))  # type: ignore
        if _response.status_code == 403:
            raise ForbiddenError(pydantic_v1.parse_obj_as(Error, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic_v1.parse_obj_as(NotFoundErrorBody, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_corpus(
        self,
        corpus_key: CorpusKey,
        *,
        query: str,
        search: typing.Optional[SearchCorpusParameters] = OMIT,
        generation: typing.Optional[GenerationParameters] = OMIT,
        stream_response: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Iterator[QueryFullResponse]:
        """
        Query a specific corpus and find relevant results, highlight relevant snippets, and use Retrival Augmented Generation.

        Parameters
        ----------
        corpus_key : CorpusKey
            The unique key identifying the corpus to query.

        query : str
            The query to receive an answer on.

        search : typing.Optional[SearchCorpusParameters]
            The parameters to search one corpus.

        generation : typing.Optional[GenerationParameters]

        stream_response : typing.Optional[bool]
            Indicates whether the response should be streamed or not.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Yields
        ------
        typing.Iterator[QueryFullResponse]
            A response to a query.

        Examples
        --------
        from vectara import (
            CitationParameters,
            ContextConfiguration,
            GenerationParameters,
            ModelParameters,
            SearchCorpusParameters,
            SearchReranker_CustomerReranker,
        )
        from vectara.client import Vectara

        client = Vectara(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
        )
        response = client.queries.get_corpus(
            corpus_key="string",
            query="string",
            search=SearchCorpusParameters(
                custom_dimensions={"string": 1.1},
                metadata_filter="string",
                lexical_interpolation=1.1,
                semantics="default",
                offset=1,
                limit=1,
                context_configuration=ContextConfiguration(),
                reranker=SearchReranker_CustomerReranker(),
            ),
            generation=GenerationParameters(
                prompt_name="string",
                max_used_search_results=1,
                prompt_text="string",
                max_response_characters=1,
                response_language="auto",
                model_parameters=ModelParameters(
                    max_tokens=1,
                    temperature=1.1,
                    frequency_penalty=1.1,
                    presence_penalty=1.1,
                ),
                citations=CitationParameters(),
                enable_factual_consistency_score=True,
            ),
            stream_response=True,
        )
        for chunk in response:
            yield chunk
        """
        with self._client_wrapper.httpx_client.stream(
            f"v2/corpora/{jsonable_encoder(corpus_key)}/query",
            method="POST",
            json={"query": query, "search": search, "generation": generation, "stream_response": stream_response},
            request_options=request_options,
            omit=OMIT,
        ) as _response:
            if 200 <= _response.status_code < 300:
                for _text in _response.iter_lines():
                    if len(_text) == 0:
                        continue
                    yield pydantic_v1.parse_obj_as(QueryFullResponse, json.loads(_text))  # type: ignore
                return
            _response.read()
            if _response.status_code == 400:
                raise BadRequestError(pydantic_v1.parse_obj_as(BadRequestErrorBody, _response.json()))  # type: ignore
            if _response.status_code == 403:
                raise ForbiddenError(pydantic_v1.parse_obj_as(Error, _response.json()))  # type: ignore
            if _response.status_code == 404:
                raise NotFoundError(pydantic_v1.parse_obj_as(NotFoundErrorBody, _response.json()))  # type: ignore
            try:
                _response_json = _response.json()
            except JSONDecodeError:
                raise ApiError(status_code=_response.status_code, body=_response.text)
            raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncQueriesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get_corpora(
        self,
        *,
        query: str,
        search: SearchCorporaParameters,
        generation: typing.Optional[GenerationParameters] = OMIT,
        stream_response: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.AsyncIterator[QueryFullResponse]:
        """
        Perform a multi-purpose query that can retrieve relevant information from one or more corpora and generate a response using RAG.

        Parameters
        ----------
        query : str
            The query to receive an answer on.

        search : SearchCorporaParameters

        generation : typing.Optional[GenerationParameters]

        stream_response : typing.Optional[bool]
            Indicates whether the response should be streamed or not.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Yields
        ------
        typing.AsyncIterator[QueryFullResponse]
            A response to a query.

        Examples
        --------
        from vectara import (
            CitationParameters,
            ContextConfiguration,
            GenerationParameters,
            KeyedSearchCorpus,
            ModelParameters,
            SearchCorporaParameters,
            SearchReranker_CustomerReranker,
        )
        from vectara.client import AsyncVectara

        client = AsyncVectara(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
        )
        response = await client.queries.get_corpora(
            query="string",
            search=SearchCorporaParameters(
                corpora=[KeyedSearchCorpus()],
                offset=1,
                limit=1,
                context_configuration=ContextConfiguration(),
                reranker=SearchReranker_CustomerReranker(),
            ),
            generation=GenerationParameters(
                prompt_name="string",
                max_used_search_results=1,
                prompt_text="string",
                max_response_characters=1,
                response_language="auto",
                model_parameters=ModelParameters(
                    max_tokens=1,
                    temperature=1.1,
                    frequency_penalty=1.1,
                    presence_penalty=1.1,
                ),
                citations=CitationParameters(),
                enable_factual_consistency_score=True,
            ),
            stream_response=True,
        )
        async for chunk in response:
            yield chunk
        """
        async with self._client_wrapper.httpx_client.stream(
            "v2/query",
            method="POST",
            json={"query": query, "search": search, "generation": generation, "stream_response": stream_response},
            request_options=request_options,
            omit=OMIT,
        ) as _response:
            if 200 <= _response.status_code < 300:
                async for _text in _response.aiter_lines():
                    if len(_text) == 0:
                        continue
                    yield pydantic_v1.parse_obj_as(QueryFullResponse, json.loads(_text))  # type: ignore
                return
            await _response.aread()
            if _response.status_code == 400:
                raise BadRequestError(pydantic_v1.parse_obj_as(BadRequestErrorBody, _response.json()))  # type: ignore
            if _response.status_code == 403:
                raise ForbiddenError(pydantic_v1.parse_obj_as(Error, _response.json()))  # type: ignore
            if _response.status_code == 404:
                raise NotFoundError(pydantic_v1.parse_obj_as(NotFoundErrorBody, _response.json()))  # type: ignore
            try:
                _response_json = _response.json()
            except JSONDecodeError:
                raise ApiError(status_code=_response.status_code, body=_response.text)
            raise ApiError(status_code=_response.status_code, body=_response_json)

    async def search_corpus(
        self,
        corpus_key: CorpusKey,
        *,
        query: str,
        limit: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> QueryFullResponse:
        """
        Search a single corpus with a simple query request.

        Parameters
        ----------
        corpus_key : CorpusKey
            The unique key identifying the corpus to query.

        query : str
            The search query string for the corpus.

        limit : typing.Optional[int]
            Maximum number of results to return.

        offset : typing.Optional[int]
            Position from which to start in the result set.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        QueryFullResponse
            A response to a query.

        Examples
        --------
        from vectara.client import AsyncVectara

        client = AsyncVectara(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
        )
        await client.queries.search_corpus(
            corpus_key="my-corpus",
            query="query",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v2/corpora/{jsonable_encoder(corpus_key)}/query",
            method="GET",
            params={"query": query, "limit": limit, "offset": offset},
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(QueryFullResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic_v1.parse_obj_as(BadRequestErrorBody, _response.json()))  # type: ignore
        if _response.status_code == 403:
            raise ForbiddenError(pydantic_v1.parse_obj_as(Error, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic_v1.parse_obj_as(NotFoundErrorBody, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_corpus(
        self,
        corpus_key: CorpusKey,
        *,
        query: str,
        search: typing.Optional[SearchCorpusParameters] = OMIT,
        generation: typing.Optional[GenerationParameters] = OMIT,
        stream_response: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.AsyncIterator[QueryFullResponse]:
        """
        Query a specific corpus and find relevant results, highlight relevant snippets, and use Retrival Augmented Generation.

        Parameters
        ----------
        corpus_key : CorpusKey
            The unique key identifying the corpus to query.

        query : str
            The query to receive an answer on.

        search : typing.Optional[SearchCorpusParameters]
            The parameters to search one corpus.

        generation : typing.Optional[GenerationParameters]

        stream_response : typing.Optional[bool]
            Indicates whether the response should be streamed or not.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Yields
        ------
        typing.AsyncIterator[QueryFullResponse]
            A response to a query.

        Examples
        --------
        from vectara import (
            CitationParameters,
            ContextConfiguration,
            GenerationParameters,
            ModelParameters,
            SearchCorpusParameters,
            SearchReranker_CustomerReranker,
        )
        from vectara.client import AsyncVectara

        client = AsyncVectara(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
        )
        response = await client.queries.get_corpus(
            corpus_key="string",
            query="string",
            search=SearchCorpusParameters(
                custom_dimensions={"string": 1.1},
                metadata_filter="string",
                lexical_interpolation=1.1,
                semantics="default",
                offset=1,
                limit=1,
                context_configuration=ContextConfiguration(),
                reranker=SearchReranker_CustomerReranker(),
            ),
            generation=GenerationParameters(
                prompt_name="string",
                max_used_search_results=1,
                prompt_text="string",
                max_response_characters=1,
                response_language="auto",
                model_parameters=ModelParameters(
                    max_tokens=1,
                    temperature=1.1,
                    frequency_penalty=1.1,
                    presence_penalty=1.1,
                ),
                citations=CitationParameters(),
                enable_factual_consistency_score=True,
            ),
            stream_response=True,
        )
        async for chunk in response:
            yield chunk
        """
        async with self._client_wrapper.httpx_client.stream(
            f"v2/corpora/{jsonable_encoder(corpus_key)}/query",
            method="POST",
            json={"query": query, "search": search, "generation": generation, "stream_response": stream_response},
            request_options=request_options,
            omit=OMIT,
        ) as _response:
            if 200 <= _response.status_code < 300:
                async for _text in _response.aiter_lines():
                    if len(_text) == 0:
                        continue
                    yield pydantic_v1.parse_obj_as(QueryFullResponse, json.loads(_text))  # type: ignore
                return
            await _response.aread()
            if _response.status_code == 400:
                raise BadRequestError(pydantic_v1.parse_obj_as(BadRequestErrorBody, _response.json()))  # type: ignore
            if _response.status_code == 403:
                raise ForbiddenError(pydantic_v1.parse_obj_as(Error, _response.json()))  # type: ignore
            if _response.status_code == 404:
                raise NotFoundError(pydantic_v1.parse_obj_as(NotFoundErrorBody, _response.json()))  # type: ignore
            try:
                _response_json = _response.json()
            except JSONDecodeError:
                raise ApiError(status_code=_response.status_code, body=_response.text)
            raise ApiError(status_code=_response.status_code, body=_response_json)
