# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.jsonable_encoder import jsonable_encoder
from ..core.pydantic_utilities import pydantic_v1
from ..core.request_options import RequestOptions
from ..errors.bad_request_error import BadRequestError
from ..errors.forbidden_error import ForbiddenError
from ..types.api_key import ApiKey
from ..types.api_key_role import ApiKeyRole
from ..types.bad_request_error_body import BadRequestErrorBody
from ..types.corpus_key import CorpusKey
from ..types.error import Error
from ..types.list_api_keys_response import ListApiKeysResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ApiKeysClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list_api_keys(
        self,
        *,
        limit: typing.Optional[int] = None,
        page_key: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListApiKeysResponse:
        """
        Parameters
        ----------
        limit : typing.Optional[int]
            Max number of API keys to return at one time.

        page_key : typing.Optional[str]
            Used to the retrieve the next page of API keys after the limit has been reached.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListApiKeysResponse
            An array of API keys.

        Examples
        --------
        from vectara.client import Vectara

        client = Vectara(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
        )
        client.api_keys.list_api_keys()
        """
        _response = self._client_wrapper.httpx_client.request(
            "v2/api_keys", method="GET", params={"limit": limit, "page_key": page_key}, request_options=request_options
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(ListApiKeysResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic_v1.parse_obj_as(BadRequestErrorBody, _response.json()))  # type: ignore
        if _response.status_code == 403:
            raise ForbiddenError(pydantic_v1.parse_obj_as(Error, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_api_key(
        self,
        *,
        name: str,
        api_key_role: ApiKeyRole,
        corpus_keys: typing.Optional[typing.Sequence[CorpusKey]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ApiKey:
        """
        An API key is to authenticate when calling Vectara APIs.

        Parameters
        ----------
        name : str
            The human-readable name of the API key.

        api_key_role : ApiKeyRole

        corpus_keys : typing.Optional[typing.Sequence[CorpusKey]]
            Corpora this API key has roles on if it is not a Personal API key.
            This property should be null of missing if this `api_key_role` is
            `personal`.


        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ApiKey
            An API Key object, used to query the Vectara API with the assigned roles.

        Examples
        --------
        from vectara.client import Vectara

        client = Vectara(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
        )
        client.api_keys.create_api_key(
            name="name",
            api_key_role="serving",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "v2/api_keys",
            method="POST",
            json={"name": name, "api_key_role": api_key_role, "corpus_keys": corpus_keys},
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(ApiKey, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic_v1.parse_obj_as(BadRequestErrorBody, _response.json()))  # type: ignore
        if _response.status_code == 403:
            raise ForbiddenError(pydantic_v1.parse_obj_as(Error, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_api_key(self, api_key_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> ApiKey:
        """
        Parameters
        ----------
        api_key_id : str
            The name of the API key.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ApiKey
            The API key.

        Examples
        --------
        from vectara.client import Vectara

        client = Vectara(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
        )
        client.api_keys.get_api_key(
            api_key_id="api_key_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v2/api_keys/{jsonable_encoder(api_key_id)}", method="GET", request_options=request_options
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(ApiKey, _response.json())  # type: ignore
        if _response.status_code == 403:
            raise ForbiddenError(pydantic_v1.parse_obj_as(Error, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete_api_key(self, api_key_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Delete API keys to help you manage the security and lifecycle of API keys in your application.

        Parameters
        ----------
        api_key_id : str
            The name of the API key.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from vectara.client import Vectara

        client = Vectara(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
        )
        client.api_keys.delete_api_key(
            api_key_id="api_key_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v2/api_keys/{jsonable_encoder(api_key_id)}", method="DELETE", request_options=request_options
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 403:
            raise ForbiddenError(pydantic_v1.parse_obj_as(Error, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update_api_key(
        self,
        api_key_id: str,
        *,
        enabled: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ApiKey:
        """
        Update an API key such as the roles attached to the key.

        Parameters
        ----------
        api_key_id : str
            The name of the API key.

        enabled : typing.Optional[bool]
            Indicates whether to disable or enable an API key.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ApiKey
            The API key.

        Examples
        --------
        from vectara.client import Vectara

        client = Vectara(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
        )
        client.api_keys.update_api_key(
            api_key_id="api_key_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v2/api_keys/{jsonable_encoder(api_key_id)}",
            method="PATCH",
            json={"enabled": enabled},
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(ApiKey, _response.json())  # type: ignore
        if _response.status_code == 403:
            raise ForbiddenError(pydantic_v1.parse_obj_as(Error, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncApiKeysClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list_api_keys(
        self,
        *,
        limit: typing.Optional[int] = None,
        page_key: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListApiKeysResponse:
        """
        Parameters
        ----------
        limit : typing.Optional[int]
            Max number of API keys to return at one time.

        page_key : typing.Optional[str]
            Used to the retrieve the next page of API keys after the limit has been reached.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListApiKeysResponse
            An array of API keys.

        Examples
        --------
        from vectara.client import AsyncVectara

        client = AsyncVectara(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
        )
        await client.api_keys.list_api_keys()
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v2/api_keys", method="GET", params={"limit": limit, "page_key": page_key}, request_options=request_options
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(ListApiKeysResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic_v1.parse_obj_as(BadRequestErrorBody, _response.json()))  # type: ignore
        if _response.status_code == 403:
            raise ForbiddenError(pydantic_v1.parse_obj_as(Error, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_api_key(
        self,
        *,
        name: str,
        api_key_role: ApiKeyRole,
        corpus_keys: typing.Optional[typing.Sequence[CorpusKey]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ApiKey:
        """
        An API key is to authenticate when calling Vectara APIs.

        Parameters
        ----------
        name : str
            The human-readable name of the API key.

        api_key_role : ApiKeyRole

        corpus_keys : typing.Optional[typing.Sequence[CorpusKey]]
            Corpora this API key has roles on if it is not a Personal API key.
            This property should be null of missing if this `api_key_role` is
            `personal`.


        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ApiKey
            An API Key object, used to query the Vectara API with the assigned roles.

        Examples
        --------
        from vectara.client import AsyncVectara

        client = AsyncVectara(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
        )
        await client.api_keys.create_api_key(
            name="name",
            api_key_role="serving",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v2/api_keys",
            method="POST",
            json={"name": name, "api_key_role": api_key_role, "corpus_keys": corpus_keys},
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(ApiKey, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic_v1.parse_obj_as(BadRequestErrorBody, _response.json()))  # type: ignore
        if _response.status_code == 403:
            raise ForbiddenError(pydantic_v1.parse_obj_as(Error, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_api_key(self, api_key_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> ApiKey:
        """
        Parameters
        ----------
        api_key_id : str
            The name of the API key.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ApiKey
            The API key.

        Examples
        --------
        from vectara.client import AsyncVectara

        client = AsyncVectara(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
        )
        await client.api_keys.get_api_key(
            api_key_id="api_key_id",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v2/api_keys/{jsonable_encoder(api_key_id)}", method="GET", request_options=request_options
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(ApiKey, _response.json())  # type: ignore
        if _response.status_code == 403:
            raise ForbiddenError(pydantic_v1.parse_obj_as(Error, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete_api_key(self, api_key_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Delete API keys to help you manage the security and lifecycle of API keys in your application.

        Parameters
        ----------
        api_key_id : str
            The name of the API key.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from vectara.client import AsyncVectara

        client = AsyncVectara(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
        )
        await client.api_keys.delete_api_key(
            api_key_id="api_key_id",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v2/api_keys/{jsonable_encoder(api_key_id)}", method="DELETE", request_options=request_options
        )
        if 200 <= _response.status_code < 300:
            return
        if _response.status_code == 403:
            raise ForbiddenError(pydantic_v1.parse_obj_as(Error, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update_api_key(
        self,
        api_key_id: str,
        *,
        enabled: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ApiKey:
        """
        Update an API key such as the roles attached to the key.

        Parameters
        ----------
        api_key_id : str
            The name of the API key.

        enabled : typing.Optional[bool]
            Indicates whether to disable or enable an API key.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ApiKey
            The API key.

        Examples
        --------
        from vectara.client import AsyncVectara

        client = AsyncVectara(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
        )
        await client.api_keys.update_api_key(
            api_key_id="api_key_id",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v2/api_keys/{jsonable_encoder(api_key_id)}",
            method="PATCH",
            json={"enabled": enabled},
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(ApiKey, _response.json())  # type: ignore
        if _response.status_code == 403:
            raise ForbiddenError(pydantic_v1.parse_obj_as(Error, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
