# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.jsonable_encoder import jsonable_encoder
from ..core.pydantic_utilities import pydantic_v1
from ..core.request_options import RequestOptions
from ..errors.bad_request_error import BadRequestError
from ..errors.forbidden_error import ForbiddenError
from ..errors.not_found_error import NotFoundError
from ..types.bad_request_error_body import BadRequestErrorBody
from ..types.corpus_key import CorpusKey
from ..types.create_document_request import CreateDocumentRequest
from ..types.document import Document
from ..types.error import Error
from ..types.not_found_error_body import NotFoundErrorBody

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class IndexClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def create_corpus_document(
        self,
        corpus_key: CorpusKey,
        *,
        request: CreateDocumentRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Document:
        """
        Add a document to a corpus. You can add documents that are either in a typical structured format,
        or in a format that explicitly specifies each document part that becomes a search result.

        Parameters
        ----------
        corpus_key : CorpusKey
            The unique key identifying the queried corpus.

        request : CreateDocumentRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Document
            Document added to the corpus.

        Examples
        --------
        from vectara import CoreDocumentPart, CreateDocumentRequest_Core
        from vectara.client import Vectara

        client = Vectara(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
        )
        client.index.create_corpus_document(
            corpus_key="string",
            request=CreateDocumentRequest_Core(
                id="string",
                metadata={"string": {"key": "value"}},
                document_parts=[CoreDocumentPart()],
            ),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v2/corpora/{jsonable_encoder(corpus_key)}/documents",
            method="POST",
            json=request,
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(Document, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic_v1.parse_obj_as(BadRequestErrorBody, _response.json()))  # type: ignore
        if _response.status_code == 403:
            raise ForbiddenError(pydantic_v1.parse_obj_as(Error, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic_v1.parse_obj_as(NotFoundErrorBody, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncIndexClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def create_corpus_document(
        self,
        corpus_key: CorpusKey,
        *,
        request: CreateDocumentRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Document:
        """
        Add a document to a corpus. You can add documents that are either in a typical structured format,
        or in a format that explicitly specifies each document part that becomes a search result.

        Parameters
        ----------
        corpus_key : CorpusKey
            The unique key identifying the queried corpus.

        request : CreateDocumentRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Document
            Document added to the corpus.

        Examples
        --------
        from vectara import CoreDocumentPart, CreateDocumentRequest_Core
        from vectara.client import AsyncVectara

        client = AsyncVectara(
            api_key="YOUR_API_KEY",
            token="YOUR_TOKEN",
        )
        await client.index.create_corpus_document(
            corpus_key="string",
            request=CreateDocumentRequest_Core(
                id="string",
                metadata={"string": {"key": "value"}},
                document_parts=[CoreDocumentPart()],
            ),
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v2/corpora/{jsonable_encoder(corpus_key)}/documents",
            method="POST",
            json=request,
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(Document, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic_v1.parse_obj_as(BadRequestErrorBody, _response.json()))  # type: ignore
        if _response.status_code == 403:
            raise ForbiddenError(pydantic_v1.parse_obj_as(Error, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic_v1.parse_obj_as(NotFoundErrorBody, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
