# This file was auto-generated by Fern from our API Definition.

import typing

from vectara import FilterAttribute
from vectara.client import AsyncVectara, Vectara

from .utilities import validate_response


async def test_create(client: Vectara, async_client: AsyncVectara) -> None:
    expected_response: typing.Any = {
        "id": "id",
        "key": "my-corpus",
        "name": "name",
        "description": "description",
        "enabled": True,
        "chat_history_corpus": True,
        "queries_are_answers": True,
        "documents_are_questions": True,
        "encoder_id": "encoder_id",
        "filter_attributes": [
            {
                "name": "Title",
                "level": "document",
                "description": "The title of the docment.",
                "indexed": True,
                "type": "integer",
            }
        ],
        "custom_dimensions": [{"name": "importance", "indexing_default": 0, "querying_default": 0}],
        "limits": {"used_bytes": 1, "max_bytes": 1, "max_metadata_bytes": 1, "index_rate": 1},
        "created_at": "2024-01-15T09:30:00Z",
    }
    expected_types: typing.Any = {
        "id": None,
        "key": None,
        "name": None,
        "description": None,
        "enabled": None,
        "chat_history_corpus": None,
        "queries_are_answers": None,
        "documents_are_questions": None,
        "encoder_id": None,
        "filter_attributes": (
            "list",
            {0: {"name": None, "level": None, "description": None, "indexed": None, "type": None}},
        ),
        "custom_dimensions": ("list", {0: {"name": None, "indexing_default": None, "querying_default": None}}),
        "limits": {
            "used_bytes": "integer",
            "max_bytes": "integer",
            "max_metadata_bytes": "integer",
            "index_rate": "integer",
        },
        "created_at": "datetime",
    }
    response = client.corpora.create(key="my-corpus")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.corpora.create(key="my-corpus")
    validate_response(async_response, expected_response, expected_types)


async def test_get(client: Vectara, async_client: AsyncVectara) -> None:
    expected_response: typing.Any = {
        "id": "id",
        "key": "my-corpus",
        "name": "name",
        "description": "description",
        "enabled": True,
        "chat_history_corpus": True,
        "queries_are_answers": True,
        "documents_are_questions": True,
        "encoder_id": "encoder_id",
        "filter_attributes": [
            {
                "name": "Title",
                "level": "document",
                "description": "The title of the docment.",
                "indexed": True,
                "type": "integer",
            }
        ],
        "custom_dimensions": [{"name": "importance", "indexing_default": 0, "querying_default": 0}],
        "limits": {"used_bytes": 1, "max_bytes": 1, "max_metadata_bytes": 1, "index_rate": 1},
        "created_at": "2024-01-15T09:30:00Z",
    }
    expected_types: typing.Any = {
        "id": None,
        "key": None,
        "name": None,
        "description": None,
        "enabled": None,
        "chat_history_corpus": None,
        "queries_are_answers": None,
        "documents_are_questions": None,
        "encoder_id": None,
        "filter_attributes": (
            "list",
            {0: {"name": None, "level": None, "description": None, "indexed": None, "type": None}},
        ),
        "custom_dimensions": ("list", {0: {"name": None, "indexing_default": None, "querying_default": None}}),
        "limits": {
            "used_bytes": "integer",
            "max_bytes": "integer",
            "max_metadata_bytes": "integer",
            "index_rate": "integer",
        },
        "created_at": "datetime",
    }
    response = client.corpora.get(corpus_key="my-corpus")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.corpora.get(corpus_key="my-corpus")
    validate_response(async_response, expected_response, expected_types)


async def test_delete(client: Vectara, async_client: AsyncVectara) -> None:
    # Type ignore to avoid mypy complaining about the function not being meant to return a value
    assert client.corpora.delete(corpus_key="my-corpus") is None  # type: ignore[func-returns-value]

    assert await async_client.corpora.delete(corpus_key="my-corpus") is None  # type: ignore[func-returns-value]


async def test_update(client: Vectara, async_client: AsyncVectara) -> None:
    expected_response: typing.Any = {
        "id": "id",
        "key": "my-corpus",
        "name": "name",
        "description": "description",
        "enabled": True,
        "chat_history_corpus": True,
        "queries_are_answers": True,
        "documents_are_questions": True,
        "encoder_id": "encoder_id",
        "filter_attributes": [
            {
                "name": "Title",
                "level": "document",
                "description": "The title of the docment.",
                "indexed": True,
                "type": "integer",
            }
        ],
        "custom_dimensions": [{"name": "importance", "indexing_default": 0, "querying_default": 0}],
        "limits": {"used_bytes": 1, "max_bytes": 1, "max_metadata_bytes": 1, "index_rate": 1},
        "created_at": "2024-01-15T09:30:00Z",
    }
    expected_types: typing.Any = {
        "id": None,
        "key": None,
        "name": None,
        "description": None,
        "enabled": None,
        "chat_history_corpus": None,
        "queries_are_answers": None,
        "documents_are_questions": None,
        "encoder_id": None,
        "filter_attributes": (
            "list",
            {0: {"name": None, "level": None, "description": None, "indexed": None, "type": None}},
        ),
        "custom_dimensions": ("list", {0: {"name": None, "indexing_default": None, "querying_default": None}}),
        "limits": {
            "used_bytes": "integer",
            "max_bytes": "integer",
            "max_metadata_bytes": "integer",
            "index_rate": "integer",
        },
        "created_at": "datetime",
    }
    response = client.corpora.update(corpus_key="my-corpus")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.corpora.update(corpus_key="my-corpus")
    validate_response(async_response, expected_response, expected_types)


async def test_reset(client: Vectara, async_client: AsyncVectara) -> None:
    # Type ignore to avoid mypy complaining about the function not being meant to return a value
    assert client.corpora.reset(corpus_key="my-corpus") is None  # type: ignore[func-returns-value]

    assert await async_client.corpora.reset(corpus_key="my-corpus") is None  # type: ignore[func-returns-value]


async def test_replace_filter_attributes(client: Vectara, async_client: AsyncVectara) -> None:
    expected_response: typing.Any = {"job_id": "job_id"}
    expected_types: typing.Any = {"job_id": None}
    response = client.corpora.replace_filter_attributes(
        corpus_key="my-corpus", filter_attributes=[FilterAttribute(name="Title", level="document", type="integer")]
    )
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.corpora.replace_filter_attributes(
        corpus_key="my-corpus", filter_attributes=[FilterAttribute(name="Title", level="document", type="integer")]
    )
    validate_response(async_response, expected_response, expected_types)


async def test_search(client: Vectara, async_client: AsyncVectara) -> None:
    expected_response: typing.Any = {
        "summary": "summary",
        "response_language": "auto",
        "search_results": [{"text": "text", "score": 1.1, "document_id": "document_id", "request_corpora_index": 0}],
        "factual_consistency_score": 1.1,
    }
    expected_types: typing.Any = {
        "summary": None,
        "response_language": None,
        "search_results": (
            "list",
            {0: {"text": None, "score": None, "document_id": None, "request_corpora_index": "integer"}},
        ),
        "factual_consistency_score": None,
    }
    response = client.corpora.search(corpus_key="my-corpus", query="query")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.corpora.search(corpus_key="my-corpus", query="query")
    validate_response(async_response, expected_response, expected_types)


async def test_query(client: Vectara, async_client: AsyncVectara) -> None:
    expected_response: typing.Any = {
        "summary": "summary",
        "response_language": "auto",
        "search_results": [{"text": "text", "score": 1.1, "document_id": "document_id", "request_corpora_index": 0}],
        "factual_consistency_score": 1.1,
    }
    expected_types: typing.Any = {
        "summary": None,
        "response_language": None,
        "search_results": (
            "list",
            {0: {"text": None, "score": None, "document_id": None, "request_corpora_index": "integer"}},
        ),
        "factual_consistency_score": None,
    }
    response = client.corpora.query(corpus_key="my-corpus", query="query")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.corpora.query(corpus_key="my-corpus", query="query")
    validate_response(async_response, expected_response, expected_types)
