# This file was auto-generated by Fern from our API Definition.

import typing

from vectara.client import AsyncVectara, Vectara

from .utilities import validate_response


async def test_list_(client: Vectara, async_client: AsyncVectara) -> None:
    expected_response: typing.Any = {
        "api_keys": [
            {
                "id": "id",
                "name": "name",
                "secret_key": "secret_key",
                "enabled": True,
                "api_key_role": "serving",
                "api_policy": {
                    "name": "name",
                    "allowed_operations": {"allowed_operations": {"allow_any_resource": True}},
                },
            }
        ],
        "metadata": {"page_key": "page_key"},
    }
    expected_types: typing.Any = {
        "api_keys": (
            "list",
            {
                0: {
                    "id": None,
                    "name": None,
                    "secret_key": None,
                    "enabled": None,
                    "api_key_role": None,
                    "api_policy": {
                        "name": None,
                        "allowed_operations": ("dict", {0: (None, {"allow_any_resource": None})}),
                    },
                }
            },
        ),
        "metadata": {"page_key": None},
    }
    response = client.api_keys.list()
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.api_keys.list()
    validate_response(async_response, expected_response, expected_types)


async def test_create(client: Vectara, async_client: AsyncVectara) -> None:
    expected_response: typing.Any = {
        "id": "id",
        "name": "name",
        "secret_key": "secret_key",
        "enabled": True,
        "api_key_role": "serving",
        "api_policy": {"name": "name", "allowed_operations": {"allowed_operations": {"allow_any_resource": True}}},
    }
    expected_types: typing.Any = {
        "id": None,
        "name": None,
        "secret_key": None,
        "enabled": None,
        "api_key_role": None,
        "api_policy": {"name": None, "allowed_operations": ("dict", {0: (None, {"allow_any_resource": None})})},
    }
    response = client.api_keys.create(name="name", api_key_role="serving")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.api_keys.create(name="name", api_key_role="serving")
    validate_response(async_response, expected_response, expected_types)


async def test_get(client: Vectara, async_client: AsyncVectara) -> None:
    expected_response: typing.Any = {
        "id": "id",
        "name": "name",
        "secret_key": "secret_key",
        "enabled": True,
        "api_key_role": "serving",
        "api_policy": {"name": "name", "allowed_operations": {"allowed_operations": {"allow_any_resource": True}}},
    }
    expected_types: typing.Any = {
        "id": None,
        "name": None,
        "secret_key": None,
        "enabled": None,
        "api_key_role": None,
        "api_policy": {"name": None, "allowed_operations": ("dict", {0: (None, {"allow_any_resource": None})})},
    }
    response = client.api_keys.get(api_key_id="api_key_id")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.api_keys.get(api_key_id="api_key_id")
    validate_response(async_response, expected_response, expected_types)


async def test_delete(client: Vectara, async_client: AsyncVectara) -> None:
    # Type ignore to avoid mypy complaining about the function not being meant to return a value
    assert client.api_keys.delete(api_key_id="api_key_id") is None  # type: ignore[func-returns-value]

    assert await async_client.api_keys.delete(api_key_id="api_key_id") is None  # type: ignore[func-returns-value]


async def test_update(client: Vectara, async_client: AsyncVectara) -> None:
    expected_response: typing.Any = {
        "id": "id",
        "name": "name",
        "secret_key": "secret_key",
        "enabled": True,
        "api_key_role": "serving",
        "api_policy": {"name": "name", "allowed_operations": {"allowed_operations": {"allow_any_resource": True}}},
    }
    expected_types: typing.Any = {
        "id": None,
        "name": None,
        "secret_key": None,
        "enabled": None,
        "api_key_role": None,
        "api_policy": {"name": None, "allowed_operations": ("dict", {0: (None, {"allow_any_resource": None})})},
    }
    response = client.api_keys.update(api_key_id="api_key_id")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.api_keys.update(api_key_id="api_key_id")
    validate_response(async_response, expected_response, expected_types)
