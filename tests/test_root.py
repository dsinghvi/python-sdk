# This file was auto-generated by Fern from our API Definition.

import typing

from vectara import (
    CitationParameters,
    ContextConfiguration,
    CustomerSpecificReranker,
    GenerationParameters,
    KeyedSearchCorpus,
    ModelParameters,
    SearchCorporaParameters,
)
from vectara.client import AsyncVectara, Vectara

from .utilities import validate_response


async def test_query(client: Vectara, async_client: AsyncVectara) -> None:
    expected_response: typing.Any = {
        "summary": "summary",
        "response_language": "auto",
        "search_results": [{"text": "text", "score": 1.1, "document_id": "document_id", "request_corpora_index": 0}],
        "factual_consistency_score": 1.1,
    }
    expected_types: typing.Any = {
        "summary": None,
        "response_language": None,
        "search_results": (
            "list",
            {0: {"text": None, "score": None, "document_id": None, "request_corpora_index": "integer"}},
        ),
        "factual_consistency_score": None,
    }
    response = client.query(
        query="Am I allowed to bring pets to work?",
        search=SearchCorporaParameters(
            corpora=[
                KeyedSearchCorpus(
                    custom_dimensions={},
                    metadata_filter='doc.title = "Adventures of Huckleberry Finn"',
                    lexical_interpolation=0.025,
                    semantics="default",
                    corpus_key="my-corpus",
                )
            ],
            offset=0,
            limit=10,
            context_configuration=ContextConfiguration(
                characters_before=30,
                characters_after=30,
                sentences_before=3,
                sentences_after=3,
                start_tag="<em>",
                end_tag="</em>",
            ),
            reranker=CustomerSpecificReranker(type="customer_reranker", reranker_id="rnk_272725719"),
        ),
        generation=GenerationParameters(
            prompt_name="vectara-summary-ext-v1.2.0",
            max_used_search_results=5,
            prompt_text='[\n  {"role": "system", "content": "You are a helpful search assistant."},\n  #foreach ($qResult in $vectaraQueryResults)\n    {"role": "user", "content": "Given the $vectaraIdxWord[$foreach.index] search result."},\n    {"role": "assistant", "content": "${qResult.getText()}" },\n  #end\n  {"role": "user", "content": "Generate a summary for the query \'${vectaraQuery}\' based on the above results."}\n]\n',
            max_response_characters=300,
            response_language="auto",
            model_parameters=ModelParameters(
                max_tokens=0, temperature=0.0, frequency_penalty=0.0, presence_penalty=0.0
            ),
            citations=CitationParameters(
                style="none", url_pattern="https://vectara.com/documents/{doc.id}", text_pattern="{doc.title}"
            ),
            enable_factual_consistency_score=True,
        ),
    )
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.query(
        query="Am I allowed to bring pets to work?",
        search=SearchCorporaParameters(
            corpora=[
                KeyedSearchCorpus(
                    custom_dimensions={},
                    metadata_filter='doc.title = "Adventures of Huckleberry Finn"',
                    lexical_interpolation=0.025,
                    semantics="default",
                    corpus_key="my-corpus",
                )
            ],
            offset=0,
            limit=10,
            context_configuration=ContextConfiguration(
                characters_before=30,
                characters_after=30,
                sentences_before=3,
                sentences_after=3,
                start_tag="<em>",
                end_tag="</em>",
            ),
            reranker=CustomerSpecificReranker(type="customer_reranker", reranker_id="rnk_272725719"),
        ),
        generation=GenerationParameters(
            prompt_name="vectara-summary-ext-v1.2.0",
            max_used_search_results=5,
            prompt_text='[\n  {"role": "system", "content": "You are a helpful search assistant."},\n  #foreach ($qResult in $vectaraQueryResults)\n    {"role": "user", "content": "Given the $vectaraIdxWord[$foreach.index] search result."},\n    {"role": "assistant", "content": "${qResult.getText()}" },\n  #end\n  {"role": "user", "content": "Generate a summary for the query \'${vectaraQuery}\' based on the above results."}\n]\n',
            max_response_characters=300,
            response_language="auto",
            model_parameters=ModelParameters(
                max_tokens=0, temperature=0.0, frequency_penalty=0.0, presence_penalty=0.0
            ),
            citations=CitationParameters(
                style="none", url_pattern="https://vectara.com/documents/{doc.id}", text_pattern="{doc.title}"
            ),
            enable_factual_consistency_score=True,
        ),
    )
    validate_response(async_response, expected_response, expected_types)
