# This file was auto-generated by Fern from our API Definition.

import typing

from vectara import SearchCorporaParameters
from vectara.client import AsyncVectara, Vectara

from .utilities import validate_response


async def test_list_(client: Vectara, async_client: AsyncVectara) -> None:
    expected_response: typing.Any = {
        "chats": [
            {
                "id": "id",
                "first_query": "first_query",
                "first_answer": "first_answer",
                "enabled": True,
                "created_at": "2024-01-15T09:30:00Z",
            }
        ],
        "metadata": {"page_key": "page_key"},
    }
    expected_types: typing.Any = {
        "chats": (
            "list",
            {0: {"id": None, "first_query": None, "first_answer": None, "enabled": None, "created_at": "datetime"}},
        ),
        "metadata": {"page_key": None},
    }
    response = client.chats.list()
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.chats.list()
    validate_response(async_response, expected_response, expected_types)


async def test_create(client: Vectara, async_client: AsyncVectara) -> None:
    expected_response: typing.Any = {
        "chat_id": "chat_id",
        "turn_id": "turn_id",
        "answer": "answer",
        "response_language": "auto",
        "search_results": [{"text": "text", "score": 1.1, "document_id": "document_id", "request_corpora_index": 0}],
        "factual_consistency_score": 1.1,
    }
    expected_types: typing.Any = {
        "chat_id": None,
        "turn_id": None,
        "answer": None,
        "response_language": None,
        "search_results": (
            "list",
            {0: {"text": None, "score": None, "document_id": None, "request_corpora_index": "integer"}},
        ),
        "factual_consistency_score": None,
    }
    response = client.chats.create(query="How can I use the Vectara platform?", search=SearchCorporaParameters())
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.chats.create(
        query="How can I use the Vectara platform?", search=SearchCorporaParameters()
    )
    validate_response(async_response, expected_response, expected_types)


async def test_get(client: Vectara, async_client: AsyncVectara) -> None:
    expected_response: typing.Any = {
        "id": "id",
        "first_query": "first_query",
        "first_answer": "first_answer",
        "enabled": True,
        "created_at": "2024-01-15T09:30:00Z",
    }
    expected_types: typing.Any = {
        "id": None,
        "first_query": None,
        "first_answer": None,
        "enabled": None,
        "created_at": "datetime",
    }
    response = client.chats.get(chat_id="chat_id")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.chats.get(chat_id="chat_id")
    validate_response(async_response, expected_response, expected_types)


async def test_delete(client: Vectara, async_client: AsyncVectara) -> None:
    # Type ignore to avoid mypy complaining about the function not being meant to return a value
    assert client.chats.delete(chat_id="chat_id") is None  # type: ignore[func-returns-value]

    assert await async_client.chats.delete(chat_id="chat_id") is None  # type: ignore[func-returns-value]


async def test_list_turns(client: Vectara, async_client: AsyncVectara) -> None:
    expected_response: typing.Any = {
        "turns": [
            {
                "id": "id",
                "chat_id": "chat_id",
                "query": "How do a turn this widget?",
                "answer": "The widget turns counter clockwise.",
                "enabled": True,
                "created_at": "2024-01-15T09:30:00Z",
            }
        ]
    }
    expected_types: typing.Any = {
        "turns": (
            "list",
            {
                0: {
                    "id": None,
                    "chat_id": None,
                    "query": None,
                    "answer": None,
                    "enabled": None,
                    "created_at": "datetime",
                }
            },
        )
    }
    response = client.chats.list_turns(chat_id="chat_id")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.chats.list_turns(chat_id="chat_id")
    validate_response(async_response, expected_response, expected_types)


async def test_create_turns(client: Vectara, async_client: AsyncVectara) -> None:
    expected_response: typing.Any = {
        "chat_id": "chat_id",
        "turn_id": "turn_id",
        "answer": "answer",
        "response_language": "auto",
        "search_results": [{"text": "text", "score": 1.1, "document_id": "document_id", "request_corpora_index": 0}],
        "factual_consistency_score": 1.1,
    }
    expected_types: typing.Any = {
        "chat_id": None,
        "turn_id": None,
        "answer": None,
        "response_language": None,
        "search_results": (
            "list",
            {0: {"text": None, "score": None, "document_id": None, "request_corpora_index": "integer"}},
        ),
        "factual_consistency_score": None,
    }
    response = client.chats.create_turns(
        chat_id="chat_id", query="How can I use the Vectara platform?", search=SearchCorporaParameters()
    )
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.chats.create_turns(
        chat_id="chat_id", query="How can I use the Vectara platform?", search=SearchCorporaParameters()
    )
    validate_response(async_response, expected_response, expected_types)


async def test_get_turn(client: Vectara, async_client: AsyncVectara) -> None:
    expected_response: typing.Any = {
        "id": "id",
        "chat_id": "chat_id",
        "query": "How do a turn this widget?",
        "answer": "The widget turns counter clockwise.",
        "enabled": True,
        "created_at": "2024-01-15T09:30:00Z",
    }
    expected_types: typing.Any = {
        "id": None,
        "chat_id": None,
        "query": None,
        "answer": None,
        "enabled": None,
        "created_at": "datetime",
    }
    response = client.chats.get_turn(chat_id="chat_id", turn_id="turn_id")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.chats.get_turn(chat_id="chat_id", turn_id="turn_id")
    validate_response(async_response, expected_response, expected_types)


async def test_delete_turn(client: Vectara, async_client: AsyncVectara) -> None:
    # Type ignore to avoid mypy complaining about the function not being meant to return a value
    assert client.chats.delete_turn(chat_id="chat_id", turn_id="turn_id") is None  # type: ignore[func-returns-value]

    assert await async_client.chats.delete_turn(chat_id="chat_id", turn_id="turn_id") is None  # type: ignore[func-returns-value]


async def test_update_turn(client: Vectara, async_client: AsyncVectara) -> None:
    expected_response: typing.Any = {
        "id": "id",
        "chat_id": "chat_id",
        "query": "How do a turn this widget?",
        "answer": "The widget turns counter clockwise.",
        "enabled": True,
        "created_at": "2024-01-15T09:30:00Z",
    }
    expected_types: typing.Any = {
        "id": None,
        "chat_id": None,
        "query": None,
        "answer": None,
        "enabled": None,
        "created_at": "datetime",
    }
    response = client.chats.update_turn(chat_id="chat_id", turn_id="turn_id")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.chats.update_turn(chat_id="chat_id", turn_id="turn_id")
    validate_response(async_response, expected_response, expected_types)
